""" Desc: IdeaVim is a Vim engine for JetBrains IDEs
""" Wiki: https://github.com/JetBrains/ideavim/wiki
""" Repo: https://plugins.jetbrains.com/plugin/164-ideavim
""" Deps: https://plugins.jetbrains.com/plugin/15976-which-key

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""" Set <space> as <leader>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let mapleader = ' '

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""" Common settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set sidescrolloff=5
set scrolloff=5
set linenumber
set number
set showcmd
set showmode
set incsearch
set hlsearch
set ignorecase
set notimeout
set history = 200
set undolevels = 200
set clipboard = unnamed,unnamedplus,ideaput

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""" Idea settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set ideamarks
set ideawrite=all
set ideastatusicon=gray
set idearefactormode=select

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""" Copy/Paste
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

vnoremap y <Action>(EditorCopy)
nnoremap p <Action>(EditorPaste)
vnoremap p <Action>(EditorPaste)

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""" Which Key
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set which-key

let g:WhichKey_SortOrder='by_key_prefix_first'
let g:WhichKey_DefaultDelay = 500
let g:WhichKey_ShowVimActions = 'true'
let g:WhichKey_ShowTypedSequence = 'true'
let g:WhichKey_ProcessUnknownMappings = 'false'

function! MapKeyToAction(key, action, wk_id, wk_text)
  let l:wk_opts = 'WhichKeyDesc' . '_' . a:wk_id
  let l:wk_text = '"' . a:key . ' ' . a:wk_text . '"'  
  exe 'map ' . a:key . ' ' . a:action
  exe 'let g:' . l:wk_opts . ' = ' . l:wk_text 
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""" Mappings 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""" Remove annoying cursor movements on <space>
noremap <space> <nop>


""" Set whichkey titles for groups
let g:WhichKeyDesc_projects       = "<leader>p +projects"
let g:WhichKeyDesc_errors         = "<leader>e +errors"
let g:WhichKeyDesc_code           = "<leader>c +code"
let g:WhichKeyDesc_find           = "<leader>f +find"
let g:WhichKeyDesc_goto           = "<leader>g +goto"
let g:WhichKeyDesc_git            = "<leader>G +git"
let g:WhichKeyDesc_comment        = "<leader>c +comments"
let g:WhichKeyDesc_refactor       = "<leader>c +refactor"

""" Temporary mappings
inoremap <c-h> <left>
inoremap <c-j> <down>
inoremap <c-k> <up>
inoremap <c-l> <right>

""" Use <A-q> for tabs
call MapKeyToAction('<A-l>',      '<Action>(NextTab)',                  'tabs_next',        'Next tab')
call MapKeyToAction('<A-h>',      '<Action>(PreviousTab)',              'tabs_prev',        'Previous tab')
call MapKeyToAction('<A-q>',      '<Action>(CloseEditor)',              'tabs_quit',        'Close tab')
call MapKeyToAction('<A-o>',      '<Action>(CloseAllEditorsButActive)', 'tabs_only',        'Close all other tabs')


""" Use <leader>p for projects
call MapKeyToAction('<leader>pr', '<Action>(ManageRecentProjects)',     'projects_recent',  'Open recent projects')
call MapKeyToAction('<leader>po', '<Action>(OpenFile)',                 'projects_open',    'Open project')
call MapKeyToAction('<leader>pq', '<Action>(CloseProject)',             'projects_close',   'Close project')
call MapKeyToAction('<leader>pw', '<Action>(NextProjectWindow)',        'projects_switch',  'Switch projects')


""" Use <leader>f for find
call MapKeyToAction('<leader>fe', '<Action>(SearchEverywhere)',         'find_everywhere',  'Search everywhere')
call MapKeyToAction('<leader>fi', '<Action>(SelectIn)',                 'find_in',          'Find in...')
call MapKeyToAction('<leader>fa', '<Action>(GotoAction)',               'find_action',      'Find an action')
call MapKeyToAction('<leader>ff', '<Action>(GotoFile)',                 'find_file',        'Find a file')
call MapKeyToAction('<leader>fc', '<Action>(GotoClass)',                'find_class',       'Find a class')


""" Use <leader>c for code
call MapKeyToAction('<leader>ci', '<Action>(GoToImplementation)',       'code_implement',   'Go to implementation')
call MapKeyToAction('<leader>cd', '<Action>(GotoTypeDeclaration)',      'code_declaration', 'Go to declaration')
call MapKeyToAction('<leader>cs', '<Action>(GotoSuperMethod)',          'code_super',       'Go to super method')
call MapKeyToAction('<leader>cr', '<Action>(FindUsages)',               'code_references',  'Go to references')
call MapKeyToAction('<leader>ch', '<Action>(HighlightUsagesInFile)',    'code_highlight',   'Highlight usages in file')


""" Use <leader>c for comments
call MapKeyToAction('<leader>cc', '<Action>(CommentByLineComment)',     'comments_line',    'Toggle line comment')
call MapKeyToAction('<leader>cb', '<Action>(CommentByBlockComment)',    'comments_block',   'Toggle block comment')

""" Use <leader>G for git
call MapKeyToAction('<leader>Gb', '<Action>(Annotate)',                 'git_blame',        'Git blame')
call MapKeyToAction('<leader>Gd', '<Action>(Compare.SameVersion)',      'git_diff',         'Git diff')
call MapKeyToAction('<leader>Gl', '<Action>(NextDiff)',                 'git_diff_next',    'Git next diff')
call MapKeyToAction('<leader>Gh', '<Action>(PreviousDiff)',             'git_diff_prev',    'Git previous diff')


" Use <leader>e for errors
call MapKeyToAction('<leader>el', '<Action>(GotoNextError)',            'errors_next',      'Next error')
call MapKeyToAction('<leader>eh', '<Action>(GotoPreviousError)',        'errors_prev',      'Previous error')


""" Use <leader>r for refactoring
call MapKeyToAction('<leader>ri', '<Action>(OptimizeImports)',          'refactor_imports', 'Optimize imports')
call MapKeyToAction('<leader>rr', '<Action>(RenameElement)',            'refactor_rename',  'Rename')
call MapKeyToAction('<leader>rm', '<Action>(Move)',                     'refactor_mode',    'Move')
call MapKeyToAction('<leader>rf', '<Action>(ReformatCode)',             'refactor_format',  'Reformat code')


""" Use g for goto
call MapKeyToAction('gl',         '<Action>(Forward)',                  'goto_forward',     'Go forward')
call MapKeyToAction('gh',         '<Action>(Back)',                     'goto_back',        'Go back')
call MapKeyToAction('gk',         '<Action>(MethodUp)',                 'goto_forward',     'Method up')
call MapKeyToAction('gj',         '<Action>(MethodDown)',               'goto_forward',     'Method down')


""" Use <ctrl>+n,r for selection
call MapKeyToAction('<C-n>',      '<Action>(EditorSelectWord)',         'select_extend',   'Extend selection')
call MapKeyToAction('<C-r>',      '<Action>(EditorUnSelectWord)',       'select_shrink',   'Shrink selection')


""" TODO: OPEN TERMINAL WINDOW
""" TODO: NERD_TREE
""" TODO: EASYMOTION
""" TODO: CONTEXT ACTIONS/QUICK INFO
